/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from './toggle';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '../../util/form';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from '../item/item';
import * as import11 from '@angular/forms/src/directives/control_value_accessor';
import * as import12 from '@angular/core/src/linker/component_factory';
import * as import13 from '../button/button';
import * as import14 from '../button/button.ngfactory';
import * as import15 from '../../config/config';
import * as import16 from '@angular/core/src/metadata/view';
var renderType_Toggle_Host:import0.RenderComponentType = null;
class _View_Toggle_Host0 extends import1.AppView<any> {
  _el_0:any;
  private _appEl_0:import2.AppElement;
  _Toggle_0_4:import3.Toggle;
  __NG_VALUE_ACCESSOR_0_5:any[];
  private _expr_0:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_Toggle_Host0,renderType_Toggle_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  get _NG_VALUE_ACCESSOR_0_5():any[] {
    if ((this.__NG_VALUE_ACCESSOR_0_5 == null)) { (this.__NG_VALUE_ACCESSOR_0_5 = [this._Toggle_0_4]); }
    return this.__NG_VALUE_ACCESSOR_0_5;
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ion-toggle',rootSelector,null);
    this._appEl_0 = new import2.AppElement(0,null,this,this._el_0);
    var compView_0:any = viewFactory_Toggle0(this.viewUtils,this.injector(0),this._appEl_0);
    this._Toggle_0_4 = new import3.Toggle(this.parentInjector.get(import8.Form),new import9.ElementRef(this._el_0),this.renderer,this.parentInjector.get(import10.Item,null));
    this._appEl_0.initComponent(this._Toggle_0_4,[],compView_0);
    compView_0.create(this._Toggle_0_4,this.projectableNodes,null);
    this._expr_0 = import7.UNINITIALIZED;
    this.init([].concat([this._el_0]),[this._el_0],[],[]);
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.Toggle) && (0 === requestNodeIndex))) { return this._Toggle_0_4; }
    if (((token === import11.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_5; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._Toggle_0_4.ngAfterContentInit(); } }
    const currVal_0:any = this._Toggle_0_4._disabled;
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'toggle-disabled',currVal_0);
      this._expr_0 = currVal_0;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
  destroyInternal():void {
    this._Toggle_0_4.ngOnDestroy();
  }
}
function viewFactory_Toggle_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_Toggle_Host === null)) { (renderType_Toggle_Host = viewUtils.createRenderComponentType('',0,null,[],{})); }
  return new _View_Toggle_Host0(viewUtils,parentInjector,declarationEl);
}
export const ToggleNgFactory:import12.ComponentFactory<import3.Toggle> = new import12.ComponentFactory<import3.Toggle>('ion-toggle',viewFactory_Toggle_Host0,import3.Toggle);
const styles_Toggle:any[] = [];
var renderType_Toggle:import0.RenderComponentType = null;
class _View_Toggle0 extends import1.AppView<import3.Toggle> {
  _el_0:any;
  _el_1:any;
  _el_2:any;
  private _appEl_2:import2.AppElement;
  _Button_2_4:import13.Button;
  private _expr_0:any;
  private _expr_1:any;
  private _expr_2:any;
  private _expr_3:any;
  private _expr_4:any;
  private _expr_5:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_Toggle0,renderType_Toggle,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._el_0 = this.renderer.createElement(parentRenderNode,'div',null);
    this.renderer.setElementAttribute(this._el_0,'class','toggle-icon');
    this._el_1 = this.renderer.createElement(this._el_0,'div',null);
    this.renderer.setElementAttribute(this._el_1,'class','toggle-inner');
    this._el_2 = this.renderer.createElement(parentRenderNode,'button',null);
    this.renderer.setElementAttribute(this._el_2,'class','item-cover');
    this.renderer.setElementAttribute(this._el_2,'ion-button','item-cover');
    this.renderer.setElementAttribute(this._el_2,'role','checkbox');
    this.renderer.setElementAttribute(this._el_2,'type','button');
    this._appEl_2 = new import2.AppElement(2,null,this,this._el_2);
    var compView_2:any = import14.viewFactory_Button0(this.viewUtils,this.injector(2),this._appEl_2);
    this._Button_2_4 = new import13.Button('item-cover',this.parentInjector.get(import15.Config),new import9.ElementRef(this._el_2),this.renderer);
    this._appEl_2.initComponent(this._Button_2_4,[],compView_2);
    compView_2.create(this._Button_2_4,[[]],null);
    this._expr_0 = import7.UNINITIALIZED;
    this._expr_1 = import7.UNINITIALIZED;
    this._expr_2 = import7.UNINITIALIZED;
    this._expr_3 = import7.UNINITIALIZED;
    this._expr_4 = import7.UNINITIALIZED;
    this._expr_5 = import7.UNINITIALIZED;
    this.init([],[
      this._el_0,
      this._el_1,
      this._el_2
    ]
    ,[],[]);
    return null;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import13.Button) && (2 === requestNodeIndex))) { return this._Button_2_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.detectContentChildrenChanges(throwOnChange);
    if (!throwOnChange) {
      if ((this.numberOfChecks === 0)) { this._Button_2_4.ngAfterContentInit(); }
      this._Button_2_4.ngAfterContentChecked();
    }
    const currVal_0:any = this.context._checked;
    if (import4.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      this.renderer.setElementClass(this._el_0,'toggle-checked',currVal_0);
      this._expr_0 = currVal_0;
    }
    const currVal_1:any = this.context._activated;
    if (import4.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      this.renderer.setElementClass(this._el_0,'toggle-activated',currVal_1);
      this._expr_1 = currVal_1;
    }
    const currVal_2:any = this.context.id;
    if (import4.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setElementProperty(this._el_2,'id',currVal_2);
      this._expr_2 = currVal_2;
    }
    const currVal_3:any = this.context._checked;
    if (import4.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      this.renderer.setElementAttribute(this._el_2,'aria-checked',((currVal_3 == null)? null: currVal_3.toString()));
      this._expr_3 = currVal_3;
    }
    const currVal_4:any = this.context._labelId;
    if (import4.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setElementAttribute(this._el_2,'aria-labelledby',((currVal_4 == null)? null: currVal_4.toString()));
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context._disabled;
    if (import4.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setElementAttribute(this._el_2,'aria-disabled',((currVal_5 == null)? null: currVal_5.toString()));
      this._expr_5 = currVal_5;
    }
    this.detectViewChildrenChanges(throwOnChange);
  }
}
export function viewFactory_Toggle0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.Toggle> {
  if ((renderType_Toggle === null)) { (renderType_Toggle = viewUtils.createRenderComponentType('/Users/dan/Dev/ionic2-build/src/components/toggle/toggle.ts class Toggle - inline template',0,import16.ViewEncapsulation.None,styles_Toggle,{})); }
  return new _View_Toggle0(viewUtils,parentInjector,declarationEl);
}